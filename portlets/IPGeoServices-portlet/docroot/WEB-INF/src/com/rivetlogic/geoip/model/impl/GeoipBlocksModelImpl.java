/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rivetlogic.geoip.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.rivetlogic.geoip.model.GeoipBlocks;
import com.rivetlogic.geoip.model.GeoipBlocksModel;
import com.rivetlogic.geoip.service.persistence.GeoipBlocksPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the GeoipBlocks service. Represents a row in the &quot;rivetlogic_geoip_GeoipBlocks&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rivetlogic.geoip.model.GeoipBlocksModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GeoipBlocksImpl}.
 * </p>
 *
 * @author charles.rodriguez
 * @see GeoipBlocksImpl
 * @see com.rivetlogic.geoip.model.GeoipBlocks
 * @see com.rivetlogic.geoip.model.GeoipBlocksModel
 * @generated
 */
public class GeoipBlocksModelImpl extends BaseModelImpl<GeoipBlocks>
	implements GeoipBlocksModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a geoip blocks model instance should use the {@link com.rivetlogic.geoip.model.GeoipBlocks} interface instead.
	 */
	public static final String TABLE_NAME = "rivetlogic_geoip_GeoipBlocks";
	public static final Object[][] TABLE_COLUMNS = {
			{ "geonameId", Types.BIGINT },
			{ "startIp", Types.BIGINT },
			{ "endIp", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table rivetlogic_geoip_GeoipBlocks (geonameId LONG not null,startIp LONG not null,endIp LONG,primary key (geonameId, startIp))";
	public static final String TABLE_SQL_DROP = "drop table rivetlogic_geoip_GeoipBlocks";
	public static final String ORDER_BY_JPQL = " ORDER BY geoipBlocks.id.geonameId ASC, geoipBlocks.id.startIp ASC";
	public static final String ORDER_BY_SQL = " ORDER BY rivetlogic_geoip_GeoipBlocks.geonameId ASC, rivetlogic_geoip_GeoipBlocks.startIp ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rivetlogic.geoip.model.GeoipBlocks"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rivetlogic.geoip.model.GeoipBlocks"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.rivetlogic.geoip.model.GeoipBlocks"),
			true);
	public static long ENDIP_COLUMN_BITMASK = 1L;
	public static long STARTIP_COLUMN_BITMASK = 2L;
	public static long GEONAMEID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rivetlogic.geoip.model.GeoipBlocks"));

	public GeoipBlocksModelImpl() {
	}

	@Override
	public GeoipBlocksPK getPrimaryKey() {
		return new GeoipBlocksPK(_geonameId, _startIp);
	}

	@Override
	public void setPrimaryKey(GeoipBlocksPK primaryKey) {
		setGeonameId(primaryKey.geonameId);
		setStartIp(primaryKey.startIp);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new GeoipBlocksPK(_geonameId, _startIp);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((GeoipBlocksPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return GeoipBlocks.class;
	}

	@Override
	public String getModelClassName() {
		return GeoipBlocks.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("geonameId", getGeonameId());
		attributes.put("startIp", getStartIp());
		attributes.put("endIp", getEndIp());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long geonameId = (Long)attributes.get("geonameId");

		if (geonameId != null) {
			setGeonameId(geonameId);
		}

		Long startIp = (Long)attributes.get("startIp");

		if (startIp != null) {
			setStartIp(startIp);
		}

		Long endIp = (Long)attributes.get("endIp");

		if (endIp != null) {
			setEndIp(endIp);
		}
	}

	@Override
	public long getGeonameId() {
		return _geonameId;
	}

	@Override
	public void setGeonameId(long geonameId) {
		_geonameId = geonameId;
	}

	@Override
	public long getStartIp() {
		return _startIp;
	}

	@Override
	public void setStartIp(long startIp) {
		_columnBitmask |= STARTIP_COLUMN_BITMASK;

		if (!_setOriginalStartIp) {
			_setOriginalStartIp = true;

			_originalStartIp = _startIp;
		}

		_startIp = startIp;
	}

	public long getOriginalStartIp() {
		return _originalStartIp;
	}

	@Override
	public long getEndIp() {
		return _endIp;
	}

	@Override
	public void setEndIp(long endIp) {
		_columnBitmask |= ENDIP_COLUMN_BITMASK;

		if (!_setOriginalEndIp) {
			_setOriginalEndIp = true;

			_originalEndIp = _endIp;
		}

		_endIp = endIp;
	}

	public long getOriginalEndIp() {
		return _originalEndIp;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public GeoipBlocks toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GeoipBlocks)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GeoipBlocksImpl geoipBlocksImpl = new GeoipBlocksImpl();

		geoipBlocksImpl.setGeonameId(getGeonameId());
		geoipBlocksImpl.setStartIp(getStartIp());
		geoipBlocksImpl.setEndIp(getEndIp());

		geoipBlocksImpl.resetOriginalValues();

		return geoipBlocksImpl;
	}

	@Override
	public int compareTo(GeoipBlocks geoipBlocks) {
		GeoipBlocksPK primaryKey = geoipBlocks.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GeoipBlocks)) {
			return false;
		}

		GeoipBlocks geoipBlocks = (GeoipBlocks)obj;

		GeoipBlocksPK primaryKey = geoipBlocks.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		GeoipBlocksModelImpl geoipBlocksModelImpl = this;

		geoipBlocksModelImpl._originalStartIp = geoipBlocksModelImpl._startIp;

		geoipBlocksModelImpl._setOriginalStartIp = false;

		geoipBlocksModelImpl._originalEndIp = geoipBlocksModelImpl._endIp;

		geoipBlocksModelImpl._setOriginalEndIp = false;

		geoipBlocksModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<GeoipBlocks> toCacheModel() {
		GeoipBlocksCacheModel geoipBlocksCacheModel = new GeoipBlocksCacheModel();

		geoipBlocksCacheModel.geonameId = getGeonameId();

		geoipBlocksCacheModel.startIp = getStartIp();

		geoipBlocksCacheModel.endIp = getEndIp();

		return geoipBlocksCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{geonameId=");
		sb.append(getGeonameId());
		sb.append(", startIp=");
		sb.append(getStartIp());
		sb.append(", endIp=");
		sb.append(getEndIp());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.rivetlogic.geoip.model.GeoipBlocks");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>geonameId</column-name><column-value><![CDATA[");
		sb.append(getGeonameId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startIp</column-name><column-value><![CDATA[");
		sb.append(getStartIp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endIp</column-name><column-value><![CDATA[");
		sb.append(getEndIp());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = GeoipBlocks.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			GeoipBlocks.class
		};
	private long _geonameId;
	private long _startIp;
	private long _originalStartIp;
	private boolean _setOriginalStartIp;
	private long _endIp;
	private long _originalEndIp;
	private boolean _setOriginalEndIp;
	private long _columnBitmask;
	private GeoipBlocks _escapedModel;
}